" manage vim-plugins using pathogen
execute pathogen#infect()


let mapleader = ","
let maplocalleader = "\\"
" use like <localleader>

"Enable syntax highlighting
syntax on

" and optimize color scheme for dark background
set background=dark

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight Searches (Use <Space> to temporarily disable highlighting)
set hlsearch
nnoremap <Space> :noh<cr>

" Show search matches as you type them
set incsearch

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
filetype indent on

" If a file is changed outside of vim, automatically reload it without asking
set autoread

" Indentation settings for using 2 spaces instead of tabs.
set tabstop=2           " tab character will be interpreted as 2 spaces
set shiftwidth=2        " indentation will be automated to 2 spaces
set shiftround          " indentation (<c-t>, <c-d>, >>, <<)will be rounded to nearest indentation level
set expandtab           " expand all tab characters to the corresponding number of space characters

" Wrap lines breaking on word-boundaries for readability
set linebreak

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Incremental Split resize
nnoremap <leader>+ :exe "resize " . (winheight(0) * 3/2)<cr>
nnoremap <leader>- :exe "resize " . (winheight(0) * 2/3)<cr>
nnoremap <leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<cr>
nnoremap <leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<cr>

"
" I always come here to look for these keybindings, so I'm making a note of
" them here.  These are stock vim keybindings:
"
"   Maximize current vertical split   - <c-w> |
"   Maximize current horizontal split - <c-w> _
"   Make all splits even              - <c-w> =
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" " Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" run CommandT plugin
nnoremap <leader>t :CommandT<cr>

" launch a 'b'ash shell
nnoremap <leader>b :!bash<cr>

" toggle 'h'ighlighting of spelling errors
nnoremap <leader>h :set spell!<cr>

" remove all trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>

" reformat current paragraph (fix hand wrapping)
nnoremap <leader>f gqip

" quick access to edit vimrc and automatically source it on exit. think 'edit vimrc'
nnoremap <leader>ev :!vim $MYVIMRC<cr>\|:source $MYVIMRC<cr>

" by default, 'c'ompile (execute) the current file
nnoremap <leader>c :w\|!clear && %:p<cr>

" <leader>g search (recursively) files within CWD for current word (should account for visual mode)
" <leader>G search (recursively) files within CWD for current WORD

" open a git-blame session for current file, centering display around current line
nnoremap <leader>gb :w\|!clear && vim-gitblame %:p <c-r>=line('.')<cr><cr>

" show most recent commit (entire patch) affecting current line
nnoremap <leader>gs :w\|!clear && vim-gitshowcommit %:p <c-r>=line('.')<cr><cr>

" language specific key-bindings
augroup ruby
	autocmd!
	" 'c'ompile current file (run it using ruby interpreter)
  autocmd Filetype ruby nnoremap <buffer> <leader>c :w\|!clear && ruby %:p<cr>
	" 'g'oto associated source file (*.rb) or test file (*_spec.rb)
	" launch ruby 's'hell
	autocmd Filetype ruby nnoremap <buffer> <leader>s :w\|!clear && irb<cr>
	" 'r'un entire test suite
	" 'R'un current test file
	autocmd Filetype ruby nnoremap <buffer> <leader>R :w\|!clear && rspec %:p<cr>
augroup end

augroup python
  " show in bottom status bar: current class/method?
	autocmd!
	" 'c'ompile current file (run it using python interpreter)
  autocmd Filetype python nnoremap <buffer> <leader>c :w\|!clear && python %:p<cr>
	" 'g'oto associated source file (*.py) or test file (*_test.py)
	" launch python 's'hell
	autocmd Filetype python nnoremap <buffer> <leader>s :w\|!clear && python<cr>
	" 'r'un entire test suite
	autocmd Filetype python nnoremap <buffer> <leader>r :w\|!clear && py.test<cr>
	" 'R'un current test file
	autocmd Filetype python nnoremap <buffer> <leader>R :w\|!clear && py.test %<cr>
augroup end

augroup cplusplus
	autocmd!
	" 'c'ompile (using make)
	autocmd Filetype cpp nnoremap <buffer> <leader>c :w\|!clear && make clean && make<cr>
	" 'C'ompile current file (todo, merge into above in a sensible way
	autocmd Filetype cpp nnoremap <buffer> <leader>C :w\|!clear && make %:p:r<cr>
	" 'r'un (fallback to current file)
	autocmd Filetype cpp nnoremap <buffer> <leader>r :w\|!clear && make run \|\| %:p:r<cr>
	" 's'ource - goto associated source file (todo, only works in same directory)
	autocmd Filetype cpp nnoremap <buffer> <leader>s :e %:p:r.cpp<cr>
	" 'h'eader - goto associated header file (todo, only works in same directory)
	autocmd Filetype cpp nnoremap <buffer> <leader>h :e %:p:r.hpp<cr>
augroup end

augroup c
	autocmd!
	" 'c'ompile (using make)
	autocmd Filetype c nnoremap <buffer> <leader>c :w\|!clear && make clean && make<cr>
	" 'C'ompile current file (todo, merge into above in a sensible way
	autocmd Filetype c nnoremap <buffer> <leader>C :w\|!clear && make %:p:r<cr>
	" 'r'un (fallback to current file)
	autocmd Filetype c nnoremap <buffer> <leader>r :w\|!clear && make run \|\| %:p:r<cr>
	" 's'ource - goto associated source file (todo, only works in same directory)
	autocmd Filetype c nnoremap <buffer> <leader>s :e %:p:r.c<cr>
	" 'h'eader - goto associated header file (todo, only works in same directory)
	autocmd Filetype c nnoremap <buffer> <leader>h :e %:p:r.h<cr>
augroup end

augroup latex
	autocmd!
	" 'c'ompile (using texi2pdf)
	autocmd Filetype tex nnoremap <buffer> <leader>c :w\|!clear && texi2pdf %:p<cr>
	" 'r'un (open the document in a pdf viewer)
	autocmd Filetype tex nnoremap <buffer> <leader>r :w\|!clear && apvlv %:p:r.pdf<cr>
augroup end

augroup processing
	" filetype is mistakenly detected as 'arduino' (work-around for now)
	autocmd!
	" 'c'ompile
	autocmd Filetype arduino nnoremap <buffer> <leader>c :w\|!clear && processing-java --sketch=%:p:h --build<cr>
	" 'r'un
	autocmd Filetype arduino nnoremap <buffer> <leader>r :w\|!clear && processing-java --sketch=%:p:h --run<cr>
augroup end

" disable arrow keys
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
