"Enable syntax highlighting
syntax on

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight Searches (Use <Space> to temporarily disable highlighting)
set hlsearch
nmap <Space> :noh<cr>

" Show search matches as you type them
set incsearch

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
filetype indent on

" Display line numbers on the left
set number

" If a file is changed outside of vim, automatically reload it without asking
set autoread

" Indentation settings for using 2 spaces instead of tabs.
set tabstop=2           " tab character will be interpreted as 2 spaces
set shiftwidth=2        " indentation will be automated to 2 spaces
set expandtab           " expand all tab characters to the corresponding number of space characters

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" " Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" map ,c to 'compile' the current python file (run main if exists)
nmap ,c :w\|!clear && python %<cr>

" pathogen plugin manager
execute pathogen#infect()

" map ,t to launch CommandT plugin
nmap ,t :CommandT<cr>
