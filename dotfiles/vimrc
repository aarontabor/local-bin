let mapleader = ","
let maplocalleader = "\\"
" use like <localleader>

"Enable syntax highlighting
syntax on

" and optimize color scheme for dark background
set background=dark

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight Searches (Use <Space> to temporarily disable highlighting)
set hlsearch
nnoremap <Space> :noh<cr>

" Show search matches as you type them
set incsearch

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
filetype indent on

" If a file is changed outside of vim, automatically reload it without asking
set autoread

" Indentation settings for using 2 spaces instead of tabs.
set tabstop=2           " tab character will be interpreted as 2 spaces
set shiftwidth=2        " indentation will be automated to 2 spaces
set shiftround          " indentation (<c-t>, <c-d>, >>, <<)will be rounded to nearest indentation level
set expandtab           " expand all tab characters to the corresponding number of space characters

" Wrap lines that are longer than 80 characters
set textwidth=80

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Incremental Split resize
nnoremap <leader>+ :exe "resize " . (winheight(0) * 3/2)<cr>
nnoremap <leader>- :exe "resize " . (winheight(0) * 2/3)<cr>
nnoremap <leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<cr>
nnoremap <leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<cr>

"
" I always come here to look for these keybindings, so I'm making a note of
" them here.  These are stock vim keybindings:
"
"   Maximize current vertical split   - <c-w> |
"   Maximize current horizontal split - <c-w> _
"   Make all splits even              - <c-w> =
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" " Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" run (or 'compile' if you like) current python source file
augroup compile
  autocmd!
  autocmd Bufread nnoremap <buffer> <leader>c :w\|!clear && %:p<cr>
  autocmd Filetype python nnoremap <buffer> <leader>c :w\|!clear && python %:p<cr>
  autocmd Filetype c nnoremap <buffer> <leader>c :w\|!clear && make && make run<cr>
augroup end

" run current test file with py.test
nnoremap <leader>r :w\|!clear && py.test %<cr>

" run test suite
nnoremap <leader>R :w\|!clear && py.test<cr>

" launch python shell
nnoremap <leader>s :w\|!clear && python<cr>

" run CommandT plugin
nnoremap <leader>t :CommandT<cr>

" quick access to edit vimrc and automatically source it on exit
" think 'edit vimrc'
nnoremap <leader>ev :!vim $MYVIMRC<cr>\|:source $MYVIMRC<cr>

" wrap current visual selection in quotes
vnoremap <leader>" <esc>`<i"<esc>`>la"<esc>
vnoremap <leader>' <esc>`<i'<esc>`>la'<esc>

" wrap current word in quotes
nnoremap <leader>" lbi"<esc>lea"<esc>
nnoremap <leader>' lbi'<esc>lea'<esc>

" disable arrow keys
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" remove all trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>

" reformat current paragraph (fix hand wrapping)
nnoremap <leader>f gqip

" quicker escape from insert mode
inoremap jk <esc>
